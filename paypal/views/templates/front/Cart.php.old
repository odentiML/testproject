<?php
	//require_once dirname(__FILE__) . '/PSWebServiceLibrary.php';

	class Cart {

		public $_products;
		public $_count;
		public $_noshipping;
		public $_total_produit_ht;
		public $_total_produit_tva;
		public $_total_produit_ttc;
		public $_total_shipping;
		public $_total_commande;
		public $_messages;
		
		public $_id_customer;
		public $_id_address_delivery;
		public $_id_address_invoice;
		
		protected $DEBUG 					= false;
		protected $PS_SHOP_PATH 	= 'http://www.neovapo.com';
		protected $PS_WS_AUTH_KEY = '0HKT191HJDS1BQDG9ADC8OSTXK6VFIUE';
		
		public function __construct() {
			$this->init();
		}

		private function init() {
			if (isset($_SESSION['cart'])) {
				/*if (!isset($_SESSION['cart']['products']) || empty($_SESSION['cart']['products'])) {
					$_SESSION['cart']['products'] = array();
				}
				if (!isset($_SESSION['cart']['messages']) || empty($_SESSION['cart']['messages'])) {
					$_SESSION['cart']['messages'] = array();
				}*/
			} else {
				$_SESSION['cart'] = array();
				$_SESSION['cart']['count'] = 0;
				$_SESSION['cart']['noshipping'] = 0;
				$_SESSION['cart']['total_produit_ht'] = 0.00;
				$_SESSION['cart']['total_produit_tva'] = 0.00;
				$_SESSION['cart']['total_produit_ttc'] = 0.00;
				$_SESSION['cart']['total_shipping'] = 0.00;
				$_SESSION['cart']['total_commande'] = 0.00;
				$_SESSION['cart']['products'] = array();
				$_SESSION['cart']['messages'] = array();
			}
			$this->update();
		}

		private function update() {
			$this->_products = $_SESSION['cart']['products'];
			$this->_count = count($_SESSION['cart']['products']);
			$this->_messages = $_SESSION['cart']['messages'];
			$this->_total_produit_ht  = 0.00;
			$this->_total_produit_tva = 0.00;
			$this->_total_produit_ttc = 0.00;
			foreach ($this->_products as $o) {
				$this->_total_produit_ht += $o['total_ht'];
				$this->_total_produit_tva += $o['total_tva'];
				$this->_total_produit_ttc += $o['total_ttc'];
			}
			$_SESSION['cart']['count'] = $this->_count;
			$_SESSION['cart']['total_produit_ht']  = $this->_total_produit_ht;
			$_SESSION['cart']['total_produit_tva'] = $this->_total_produit_tva;
			$_SESSION['cart']['total_produit_ttc'] = $this->_total_produit_ttc;

			// Ajout option retrait au laboratoire
			if ($_SESSION['cart']['noshipping'] == 1) {
				$_SESSION['cart']['total_shipping'] = 0.00;
			}
			else {
				// Ajout frais de port
				if ($_SESSION['cart']['total_produit_ttc'] > 0) {
					$_SESSION['cart']['total_shipping'] = 0.00;
				}
			}
			
			// Total commande + FDP
			$_SESSION['cart']['total_commande'] = ($_SESSION['cart']['total_produit_ttc']+$_SESSION['cart']['total_shipping']);
			
			// stockage des donnÃ©es
			$this->_total_shipping = $_SESSION['cart']['total_shipping'];
			$this->_total_commande = $_SESSION['cart']['total_commande'];
			$this->_noshipping 		 = $_SESSION['cart']['noshipping'];
		}

		public function addMessage($text, $type = 'confirm') {
			if (isset($text) && !empty($text)) {
				$_SESSION['cart']['messages'][] = array('text' => $text, 'type' => $type);
				return true;
			}
			$this->update();
		}
		
		public function selectCarrier($noshipping = false) {
			if ($noshipping) {
				$_SESSION['cart']['noshipping'] = 1;
			} else {
				$_SESSION['cart']['noshipping'] = 0;
			}
			$this->update();
		}

		public function getMessages() {
			$ret = array();
			foreach ($_SESSION['cart']['messages'] as $message) {
				$ret[] = $message;
			}
			$this->clearMessages();
			$this->update();
			return $ret;
		}

		public function clearMessages() {
			unset($_SESSION['cart']['messages']);
			$this->init();
		}

		public function hasMessage() {
			return isset($_SESSION['cart']['messages']) && !empty($_SESSION['cart']['messages']);
		}

		public function addItem($id, $quantity = 1) {						
			$inCart = $this->inCart($id);
			if (!$inCart) {
				$combination = explode('_', $id);
				
				// Get the ID product and declinaison
				$id_product 	=	$combination[0];
				$id_attribute = $combination[1];
				
				/*try {
					$webService = new PrestaShopWebservice($this->PS_SHOP_PATH, $this->PS_WS_AUTH_KEY, $this->DEBUG);
					$xml = $webService->get(array('resource' => 'products', 'id' => $combination[0]));
				}
				catch (PrestaShopWebserviceException $e) {
					//echo $error = date('Y-m-d H:i:s') . ' - Error webservice getting manufacturers : ' . $e->getMessage() . "\n";
					//file_put_contents('/var/www/vhosts/allezdiscount.com/httpdocs/wspresta/logs.txt', $error, FILE_APPEND | LOCK_EX);
					exit(0);
				}*/
							
				//if (isset($xml->product->id) && !empty($xml->product->id)) {
					/*$reference  			= (string) $xml->product->reference;
					$final_price_ht  	= (float) $xml->product->price;
					$final_price_ttc 	= (float) $xml->product->price;
					$total_ht  				= (float) ($final_price_ht * $quantity);
					$total_ttc 				= (float) ($final_price_ttc * $quantity);
					$total_tva 				= ($total_ttc - $total_ht);
					$tax_rate  				= 20;
					$name      				= (string) $xml->product->name->language;
					$image 						= 'http://www.neovapo.com/api/images/products/'.(int)$xml->product->id.'/'.(int)$xml->product->id_default_image.'?PHP_AUTH_USER=yourpassword&ws_key=yourlogi';*/
					
					$reference  			= 'aaaaa';
					$final_price_ht  	= 10;
					$final_price_ttc 	= 10;
					$total_ht  				= 10;
					$total_ttc 				= 10;
					$total_tva 				= 10;
					$tax_rate  				= 20;
					$name      				= 'bbbbbb';
					$image 						= 'http://www.neovapo.com/api/images/products/';

					$array = array(
						'id'              => $id_product, 
						'decl'            => $id_attribute, 
						'name'            => $name,
						'image'           => $image,
						'final_price_ht'  => $final_price_ht,
						'final_price_ttc' => $final_price_ttc,
						'quantity'        => $quantity, 
						'total_ht'        => $total_ht,
						'total_tva'       => $total_tva,
						'total_ttc'       => $total_ttc,
						'tax_rate'        => $tax_rate
					);

					// On ajoute cette array en session
					$_SESSION['cart']['products'][$id] = $array;  
				//}
			
				$this->update();
			} 
			else {
				$this->updateQuantity($id, $quantity, '+');
			}
		}

		public function removeItem($id) {
			$inCart = $this->inCart($id);
			if ($inCart) {
				unset($_SESSION['cart']['products'][$id]);
				$this->update();
			}
		}

		public function updateQuantity($id, $quantity = 1, $sens = null) {
			$inCart = $this->inCart($id);
			if ($inCart) {
				$item = $_SESSION['cart']['products'][$id];
				if (!is_null($sens)) {
					if ($sens == '+') {
						$item['quantity'] = intval($item['quantity']) + intval($quantity);
					} else {
						$item['quantity'] = intval($item['quantity']) - intval($quantity);
					} 
				}
				
				$item['total_ht']  = floatval($item['quantity'] * $item['final_price_ht']);
				$item['total_ttc'] = floatval($item['quantity'] * $item['final_price_ttc']);
				$item['total_tva'] = ($item['total_ttc'] - $item['total_ht']);
				
				$_SESSION['cart']['products'][$id]['quantity']  = $item['quantity'];
				$_SESSION['cart']['products'][$id]['total_ht']  = $item['total_ht'];
				$_SESSION['cart']['products'][$id]['total_ttc'] = $item['total_ttc'];
				$_SESSION['cart']['products'][$id]['total_tva'] = $item['total_tva'];
				
				$this->update();
			}
		}

		public function clear() {
			unset($_SESSION['cart']);
			$this->init();
		}

		public function inCart($id) {
			return isset($_SESSION['cart']['products'][$id]) ? true : false;
		}
		
		public function getCart() {
			return json_encode($_SESSION['cart']);
		}
		
		public function getCartTotal() {
			return $this->_count;
		}
	}